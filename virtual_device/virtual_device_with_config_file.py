#!/usr/bin/env python3
"""
Virtual IoT Device Simulator with Config File Management
‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå IoT ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô MQTT ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö config ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå

Workflow:
1. ‡πÇ‡∏´‡∏•‡∏î config ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
2. ‡∏™‡πà‡∏á /prop (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå) -> ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
3. ‡∏£‡∏≠‡∏£‡∏±‡∏ö /config (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö)
4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
5. ‡∏™‡πà‡∏á /data (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á) -> ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß
"""

import json
import time
import random
import threading
import os
from datetime import datetime, timezone
import paho.mqtt.client as mqtt
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class VirtualDevice:
    def __init__(self):
        # Device Configuration
        self.device_id = os.getenv("DEVICE_ID", "ESP32_ENGR_LAB_001")
        self.faculty = os.getenv("FACULTY", "engineering")
        
        # MQTT Configuration
        self.broker_host = os.getenv("MQTT_BROKER_HOST", "iot666.ddns.net")
        self.broker_port = int(os.getenv("MQTT_BROKER_PORT", "1883"))
        self.username = os.getenv("MQTT_USERNAME", "electric_energy")
        self.password = os.getenv("MQTT_PASSWORD", "electric_energy")
        
        # Topics
        self.prop_topic = f"devices/{self.faculty}/{self.device_id}/prop"
        self.config_topic = f"devices/{self.faculty}/{self.device_id}/config"
        self.data_topic = f"devices/{self.faculty}/{self.device_id}/data"
        
        # Device State
        self.is_registered = False
        self.device_config = None
        self.data_interval = int(os.getenv("DATA_INTERVAL", "15"))  # seconds
        
        # Config file path
        self.config_file = f"{self.device_id}_config.json"
        self.prop_file = f"{self.device_id}_prop.json"
        
        # Threads
        self.running = True
        self.prop_thread = None
        self.data_thread = None
        
        # MQTT Client
        self.client = mqtt.Client()
        self.client.username_pw_set(self.username, self.password)
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message
        
        # Load existing files (prop first to check approval status)
        self.load_prop_from_file()
        self.load_config_from_file()

    def save_config_to_file(self, config):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            config_data = {
                "saved_timestamp": datetime.now(timezone.utc).isoformat(),
                "device_id": self.device_id,
                "config": config
            }
            
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Config ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß: {self.config_file}")
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config: {e}")

    def load_config_from_file(self):
        """‡πÇ‡∏´‡∏•‡∏î config ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config_data = json.load(f)
                
                self.device_config = config_data.get('config')
                
                # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ is_registered ‡∏à‡∏≤‡∏Å prop file
                if not self.is_registered and self.device_config and self.device_config.get('registration_status') == 'approved':
                    self.is_registered = True
                    print(f"üìÇ ‡πÇ‡∏´‡∏•‡∏î config ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: {self.config_file}")
                    print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: {config_data.get('saved_timestamp')}")
                    print("‚úÖ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ñ‡∏π‡∏Å‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå config")
                    return True
                elif self.is_registered:
                    print(f"ÔøΩ ‡πÇ‡∏´‡∏•‡∏î config ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: {self.config_file}")
                    print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: {config_data.get('saved_timestamp')}")
                    print("‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå prop")
                    return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î config: {e}")
            return False

    def save_prop_to_file(self, prop_data):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å prop data ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            prop_file_data = {
                "saved_timestamp": datetime.now(timezone.utc).isoformat(),
                "device_id": self.device_id,
                "status": "pending",  # pending, approved, rejected
                "prop_data": prop_data,
                "submission_count": 1
            }
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï submission_count
            if os.path.exists(self.prop_file):
                with open(self.prop_file, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
                    prop_file_data["submission_count"] = existing_data.get("submission_count", 0) + 1
            
            with open(self.prop_file, 'w', encoding='utf-8') as f:
                json.dump(prop_file_data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Prop data ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß: {self.prop_file}")
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å prop data: {e}")

    def load_prop_from_file(self):
        """‡πÇ‡∏´‡∏•‡∏î prop data ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"""
        try:
            if os.path.exists(self.prop_file):
                with open(self.prop_file, 'r', encoding='utf-8') as f:
                    prop_data = json.load(f)
                
                print(f"üìÇ ‡πÇ‡∏´‡∏•‡∏î prop data ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå: {self.prop_file}")
                print(f"üìä Status: {prop_data.get('status')}")
                print(f"üìù Submission count: {prop_data.get('submission_count')}")
                print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠: {prop_data.get('saved_timestamp')}")
                
                # ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô approved ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô registered
                if prop_data.get('status') == 'approved':
                    self.is_registered = True
                    print("‚úÖ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß - ‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏° prop phase ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á /data ‡πÄ‡∏•‡∏¢")
                
                return prop_data
            
            print("üìù ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå prop data - ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà")
            return None
            
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î prop data: {e}")
            return None

    def update_prop_status(self, status):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ prop"""
        try:
            if os.path.exists(self.prop_file):
                with open(self.prop_file, 'r', encoding='utf-8') as f:
                    prop_data = json.load(f)
                
                prop_data["status"] = status
                prop_data["status_updated_at"] = datetime.now(timezone.utc).isoformat()
                
                with open(self.prop_file, 'w', encoding='utf-8') as f:
                    json.dump(prop_data, f, indent=2, ensure_ascii=False)
                
                print(f"‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ prop ‡πÄ‡∏õ‡πá‡∏ô: {status}")
                
        except Exception as e:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ prop: {e}")

    def on_connect(self, client, userdata, flags, rc):
        """Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        if rc == 0:
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # Subscribe to config topic
            client.subscribe(self.config_topic)
            print(f"üì° Subscribe: {self.config_topic}")
            
            # Start appropriate phase
            if self.is_registered:
                print("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Data Phase (‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß)")
                self.start_data_phase()
            else:
                print("üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Prop Phase (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥)")
                self.start_prop_phase()
                
        else:
            print(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MQTT ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {rc}")

    def on_message(self, client, userdata, msg):
        """Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° MQTT"""
        try:
            if msg.topic == self.config_topic:
                payload = json.loads(msg.payload.decode())
                
                print(f"\nüì® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Config:")
                print(f"üìÑ Config: {json.dumps(payload, indent=2, ensure_ascii=False)}")
                
                self.handle_config_message(payload)
                
        except Exception as e:
            print(f"‚ùå Error processing message: {e}")

    def handle_config_message(self, config):
        """‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö"""
        self.device_config = config
        self.is_registered = True
        
        # Save config to file
        self.save_config_to_file(config)
        
        # Update prop status to approved
        self.update_prop_status("approved")
        
        print("\nüéâ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß!")
        
        # Extract info from config structure
        location = config.get('assigned_location', {})
        meter = config.get('assigned_meter', {})
        power_specs = meter.get('power_specifications', {})
        
        print(f"üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {location.get('building', 'N/A')} ‡∏ä‡∏±‡πâ‡∏ô {location.get('floor', 'N/A')}")
        print(f"üè¢ ‡∏´‡πâ‡∏≠‡∏á: {location.get('room', 'N/A')}")
        print(f"‚ö° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏ü: {power_specs.get('rated_power', 0)/1000:.1f} kW")
        print(f"üîß ‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå: {meter.get('meter_model', 'N/A')}")
        print(f"üíæ Config ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {self.config_file}")
        
        # Update data interval from config
        device_config = config.get('device_configuration', {})
        if device_config.get('data_collection_interval'):
            self.data_interval = device_config.get('data_collection_interval')
            print(f"‚è±Ô∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {self.data_interval} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        # Stop prop phase, start data phase
        self.stop_prop_phase()
        self.start_data_phase()

    def start_prop_phase(self):
        """Phase 1: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• device properties (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô)"""
        print("\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Phase 1: ‡∏™‡πà‡∏á Device Properties")
        print(f"üì° Topic: {self.prop_topic}")
        
        def send_prop():
            while not self.is_registered and self.running:
                prop_data = self.generate_prop_data()
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å prop data ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
                self.save_prop_to_file(prop_data)
                
                self.client.publish(
                    self.prop_topic,
                    json.dumps(prop_data, ensure_ascii=False),
                    qos=1
                )
                
                print(f"üì§ ‡∏™‡πà‡∏á /prop: {prop_data['device_id']} (‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥...)")
                time.sleep(30)  # ‡∏™‡πà‡∏á‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        self.prop_thread = threading.Thread(target=send_prop)
        self.prop_thread.daemon = True
        self.prop_thread.start()

    def stop_prop_phase(self):
        """‡∏´‡∏¢‡∏∏‡∏î prop phase"""
        print("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î Prop Phase")

    def start_data_phase(self):
        """Phase 2: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á (‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß)"""
        print(f"\nüîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° Phase 2: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á")
        print(f"üì° Topic: {self.data_topic}")
        print(f"‚è±Ô∏è ‡∏ó‡∏∏‡∏Å {self.data_interval} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        def send_data():
            while self.is_registered and self.running:
                data = self.generate_data()
                
                self.client.publish(
                    self.data_topic,
                    json.dumps(data, ensure_ascii=False),
                    qos=1
                )
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á
                total_power = data['electrical_measurements']['active_power']
                voltage = data['electrical_measurements']['voltage']
                current = data['electrical_measurements']['current_amperage']
                
                print(f"üìä ‡∏™‡πà‡∏á /data: {total_power/1000:.1f}kW | {voltage:.1f}V | {current:.1f}A ({datetime.now().strftime('%H:%M:%S')})")
                time.sleep(self.data_interval)
        
        self.data_thread = threading.Thread(target=send_data)
        self.data_thread.daemon = True
        self.data_thread.start()

    def generate_prop_data(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Device Properties (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà device ‡∏£‡∏π‡πâ‡πÄ‡∏≠‡∏á)"""
        return {
            "device_id": self.device_id,
            "device_name": "Computer Engineering Lab Meter", 
            "data_collection_interval": self.data_interval,
            "status": "online",
            "timestamp": datetime.now(timezone.utc).isoformat(),
            
            # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà device ‡∏£‡∏π‡πâ‡∏à‡∏£‡∏¥‡∏á
            "device_prop": {
                "device_type": "digital_meter",
                "installation_date": "2024-01-15",
                "connection_type": "wifi",
                "ip_address": "192.168.100.205",
                "mac_address": "AA:BB:CC:DD:EE:FF",
                "firmware_version": "2.1.3"
            }
        }

    def generate_data(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô device_data_example.json ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πä‡∏∞"""
        variation = random.uniform(0.9, 1.1)
        
        return {
            "device_id": self.device_id,
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "measurement_interval": self.data_interval,
            "sequence_number": random.randint(1000, 9999),
            
            "network_status": "online",
            "connection_quality": random.randint(75, 95),
            "signal_strength": random.randint(-70, -45),
            
            "electrical_measurements": {
                "voltage": round(random.uniform(375, 385) * variation, 1),
                "current_amperage": round(random.uniform(40, 50) * variation, 1),
                "power_factor": round(random.uniform(0.85, 0.95), 2),
                "frequency": round(random.uniform(49.8, 50.2), 1),
                
                "active_power": round(random.uniform(25000, 30000) * variation, 1),
                "reactive_power": round(random.uniform(10000, 15000) * variation, 1),
                "apparent_power": round(random.uniform(28000, 33000) * variation, 1),
                
                "total_energy": round(random.uniform(800000, 900000), 3),
                "daily_energy": round(random.uniform(200, 300), 3)
            },
            
            "three_phase_measurements": {
                "is_three_phase": True,
                "voltage_phase_b": round(random.uniform(375, 385) * variation, 1),
                "voltage_phase_c": round(random.uniform(375, 385) * variation, 1),
                "current_phase_b": round(random.uniform(40, 50) * variation, 1),
                "current_phase_c": round(random.uniform(40, 50) * variation, 1),
                "power_factor_phase_b": round(random.uniform(0.80, 0.90), 2),
                "power_factor_phase_c": round(random.uniform(0.85, 0.95), 2),
                "active_power_phase_a": round(random.uniform(8000, 10000) * variation, 1),
                "active_power_phase_b": round(random.uniform(8000, 10000) * variation, 1),
                "active_power_phase_c": round(random.uniform(8000, 10000) * variation, 1)
            },
            
            "environmental_monitoring": {
                "device_temperature": round(random.uniform(25, 40), 1)
            },
            
            "device_health": {
                "uptime_hours": random.randint(1, 720),  # 1-720 hours (30 days)
                "last_maintenance": None,
                "last_data_received": datetime.now(timezone.utc).isoformat(),
                "data_collection_count": random.randint(1000, 10000),
                "last_error_code": None,
                "last_error_message": None,
                "last_error_time": None,
                "error_count_today": 0
            },
            
            "meter_communication": {
                "modbus_status": "ok",
                "last_successful_read": datetime.now(timezone.utc).isoformat(),
                "read_attempts": 1,
                "read_errors": 0,
                "response_time_ms": random.randint(200, 400),
                "communication_errors": 0
            },
            
            "energy_measurements": {
                "total_energy_import": round(random.uniform(800000, 900000), 3),
                "total_energy_export": round(random.uniform(100, 200), 1),
                "daily_energy_import": round(random.uniform(200, 300), 3),
                "daily_energy_export": round(random.uniform(10, 20), 1),
                "monthly_energy": round(random.uniform(6000, 8000), 3),
                "peak_demand": round(random.uniform(30000, 40000) * variation, 1)
            },
            
            "data_quality": {
                "measurement_confidence": random.randint(95, 99),
                "calibration_status": "valid",
                "last_calibration": "2024-01-15T00:00:00.000Z",
                "anomaly_detected": False,
                "data_validation_passed": True
            }
        }

    def run(self):
        """‡∏£‡∏±‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á"""
        try:
            print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Virtual Device")
            print(f"üì± Device ID: {self.device_id}")
            print(f"üåê MQTT Broker: {self.broker_host}:{self.broker_port}")
            print(f"üíæ Config File: {self.config_file}")
            print(f"üìã Prop File: {self.prop_file}")
            
            self.client.connect(self.broker_host, self.broker_port, 60)
            self.client.loop_start()
            
            print("\nüìã Workflow:")
            if self.is_registered:
                print("‚úÖ ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ")
            else:
                print("1. ‡∏™‡πà‡∏á /prop (Device Properties) ‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                print("2. ‡∏£‡∏≠‡∏£‡∏±‡∏ö /config (‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö)")
                print("3. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ -> ‡∏™‡πà‡∏á /data (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á)")
            print("\n‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î\n")
            
            while self.running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            print("\n\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
            self.running = False
            self.client.loop_stop()
            self.client.disconnect()
            
        except Exception as e:
            print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    device = VirtualDevice()
    device.run()
