// Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏ó‡∏∏‡∏Å table ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ß‡∏±‡∏á!)
const { Pool } = require('pg');

// Load environment variables
require('dotenv').config({ path: '.env.local' });

async function forceDropAllTables() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  });

  try {
    console.log('üóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏ó‡∏∏‡∏Å table ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô...');

    // ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å table ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    await pool.query(`
      DO $$ DECLARE
          r RECORD;
      BEGIN
          FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP
              EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';
          END LOOP;
      END $$;
    `);

    // ‡∏•‡∏ö functions
    await pool.query(`DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE`);

    console.log('‚úÖ ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å table ‡πÅ‡∏•‡∏∞ function ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

forceDropAllTables();
