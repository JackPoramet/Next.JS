const { Pool } = require('pg');
require('dotenv').config({ path: '.env' });

/**
 * Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Users ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 */

async function listUsers() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  });

  try {
    console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...\n');

    // Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const result = await pool.query(`
      SELECT 
        id,
        email,
        first_name,
        last_name,
        role,
        is_active,
        last_login,
        created_at,
        updated_at
      FROM users 
      ORDER BY created_at ASC
    `);

    if (result.rows.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      return;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
    const totalUsers = result.rows.length;
    const activeUsers = result.rows.filter(user => user.is_active).length;
    const adminUsers = result.rows.filter(user => user.role === 'admin').length;
    const usersWithLogin = result.rows.filter(user => user.last_login).length;

    console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
    console.log(`   ‚ó¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalUsers} ‡∏Ñ‡∏ô`);
    console.log(`   ‚ó¶ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà Active: ${activeUsers} ‡∏Ñ‡∏ô`);
    console.log(`   ‚ó¶ ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö (Admin): ${adminUsers} ‡∏Ñ‡∏ô`);
    console.log(`   ‚ó¶ ‡πÄ‡∏Ñ‡∏¢ Login ‡πÅ‡∏•‡πâ‡∏ß: ${usersWithLogin} ‡∏Ñ‡∏ô\n`);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    console.log('üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:');
    console.log('‚îÅ'.repeat(100));
    console.log('ID ‚îÇ Email                    ‚îÇ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•        ‚îÇ Role    ‚îÇ Active ‚îÇ Last Login');
    console.log('‚îÅ'.repeat(100));

    result.rows.forEach(user => {
      const fullName = `${user.first_name || ''} ${user.last_name || ''}`.trim() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
      const lastLogin = user.last_login 
        ? new Date(user.last_login).toLocaleDateString('th-TH', {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          })
        : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢';
      
      const status = user.is_active ? '‚úÖ' : '‚ùå';
      
      console.log(
        `${user.id.toString().padEnd(2)} ‚îÇ ${user.email.padEnd(24)} ‚îÇ ${fullName.padEnd(18)} ‚îÇ ${user.role.padEnd(7)} ‚îÇ ${status.padEnd(6)} ‚îÇ ${lastLogin}`
      );
    });

    console.log('‚îÅ'.repeat(100));

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Role
    const roles = [...new Set(result.rows.map(user => user.role))];
    console.log('\nüìã ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° Role:');
    
    roles.forEach(role => {
      const usersInRole = result.rows.filter(user => user.role === role);
      console.log(`\nüè∑Ô∏è  ${role.toUpperCase()} (${usersInRole.length} ‡∏Ñ‡∏ô):`);
      usersInRole.forEach(user => {
        const fullName = `${user.first_name || ''} ${user.last_name || ''}`.trim();
        const status = user.is_active ? 'üü¢' : 'üî¥';
        console.log(`   ${status} ${user.email} ${fullName ? `(${fullName})` : ''}`);
      });
    });

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà active
    const inactiveUsers = result.rows.filter(user => !user.is_active);
    if (inactiveUsers.length > 0) {
      console.log(`\n‚ö†Ô∏è  ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà active (${inactiveUsers.length} ‡∏Ñ‡∏ô):`);
      inactiveUsers.forEach(user => {
        console.log(`   üî¥ ${user.email}`);
      });
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ login
    const neverLoggedIn = result.rows.filter(user => !user.last_login);
    if (neverLoggedIn.length > 0) {
      console.log(`\nüö´ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ login (${neverLoggedIn.length} ‡∏Ñ‡∏ô):`);
      neverLoggedIn.forEach(user => {
        console.log(`   ‚≠ï ${user.email}`);
      });
    }

    console.log('\n‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.error('üí° ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PostgreSQL server');
    } else if (error.code === '42P01') {
      console.error('üí° ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô: npm run setup-db');
    }
  } finally {
    await pool.end();
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
if (require.main === module) {
  listUsers();
}

module.exports = { listUsers };
