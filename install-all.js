#!/usr/bin/env node

/**
 * üöÄ IoT Electric Energy Management System
 * Dependency Installer Script
 * ==================================================================================
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ Next.js 15
 * ‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ (Windows, Linux, macOS)
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö console output
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m'
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ
const log = {
  info: (msg) => console.log(`${colors.cyan}${msg}${colors.reset}`),
  success: (msg) => console.log(`${colors.green}${msg}${colors.reset}`),
  warning: (msg) => console.log(`${colors.yellow}${msg}${colors.reset}`),
  error: (msg) => console.log(`${colors.red}${msg}${colors.reset}`),
  title: (msg) => console.log(`${colors.magenta}${msg}${colors.reset}`)
};

// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Dependencies
const dependencies = {
  production: {
    "next": "15.4.4",
    "react": "19.1.0", 
    "react-dom": "19.1.0",
    "zustand": "^5.0.6",
    "jsonwebtoken": "^9.0.2",
    "bcryptjs": "^3.0.2",
    "pg": "^8.16.3"
  },
  development: {
    "typescript": "^5",
    "tailwindcss": "^4",
    "@tailwindcss/postcss": "^4",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/bcryptjs": "^2.4.6",
    "@types/pg": "^8.15.4",
    "eslint": "^9",
    "eslint-config-next": "15.4.4",
    "@eslint/eslintrc": "^3",
    "dotenv": "^17.2.1",
    "ts-node": "^10.9.2",
    "tsx": "^4.20.3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19"
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Node.js version
function checkNodeVersion() {
  try {
    const nodeVersion = process.version;
    const majorVersion = parseInt(nodeVersion.split('.')[0].substring(1));
    
    log.info(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Node.js version...`);
    
    if (majorVersion < 18) {
      log.error(`‚ùå Node.js version ‡∏ï‡πâ‡∏≠‡∏á 18.0.0 ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${nodeVersion})`);
      process.exit(1);
    }
    
    log.success(`‚úÖ Node.js version: ${nodeVersion} - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö`);
    return true;
  } catch (error) {
    log.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Node.js version ‡πÑ‡∏î‡πâ: ${error.message}`);
    process.exit(1);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö npm
function checkNpm() {
  try {
    const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
    log.success(`‚úÖ npm version: ${npmVersion}`);
    return true;
  } catch (error) {
    log.error(`‚ùå npm ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ${error.message}`);
    process.exit(1);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
function installDependencies(deps, type) {
  const depsList = Object.entries(deps).map(([name, version]) => `${name}@${version}`);
  const saveFlag = type === 'development' ? '--save-dev' : '';
  
  log.info(`üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ${type} dependencies...`);
  
  try {
    const command = `npm install ${saveFlag} ${depsList.join(' ')}`;
    log.info(`  üîß ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: npm install ${saveFlag} [${depsList.length} packages]`);
    
    execSync(command, { stdio: 'inherit' });
    log.success(`‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ${type} dependencies ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${depsList.length} packages)`);
  } catch (error) {
    log.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ${type} dependencies: ${error.message}`);
    process.exit(1);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
function verifyInstallation() {
  log.info(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á...`);
  
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö package.json
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    if (!fs.existsSync(packageJsonPath)) {
      log.error(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå package.json`);
      return false;
    }
    
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies
    const installedProd = Object.keys(packageJson.dependencies || {});
    const installedDev = Object.keys(packageJson.devDependencies || {});
    
    log.success(`‚úÖ Production dependencies: ${installedProd.length} packages`);
    log.success(`‚úÖ Development dependencies: ${installedDev.length} packages`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö node_modules
    const nodeModulesPath = path.join(process.cwd(), 'node_modules');
    if (fs.existsSync(nodeModulesPath)) {
      log.success(`‚úÖ node_modules directory ‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß`);
    } else {
      log.warning(`‚ö†Ô∏è node_modules directory ‡πÑ‡∏°‡πà‡∏û‡∏ö`);
    }
    
    return true;
  } catch (error) {
    log.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${error.message}`);
    return false;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
function showSummary() {
  log.title(`\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies:`);
  console.log(`${'='.repeat(50)}`);
  
  log.info(`üöÄ Frontend Framework:`);
  console.log(`  ‚úÖ Next.js 15.4.4 (with App Router & Turbopack)`);
  console.log(`  ‚úÖ React 19.1.0 (Latest)`);
  console.log(`  ‚úÖ TypeScript 5.0+`);
  
  log.info(`\nüé® UI & Styling:`);
  console.log(`  ‚úÖ Tailwind CSS v4 (Latest)`);
  
  log.info(`\nüè™ State Management:`);
  console.log(`  ‚úÖ Zustand 5.0.6 (Authentication)`);
  
  log.info(`\nüîê Authentication & Security:`);
  console.log(`  ‚úÖ JWT 9.0.2 + bcrypt 3.0.2`);
  
  log.info(`\nüóÉÔ∏è Database:`);
  console.log(`  ‚úÖ PostgreSQL Client 8.16.3`);
  
  log.info(`\nüõ†Ô∏è Development Tools:`);
  console.log(`  ‚úÖ ESLint, TypeScript, ts-node, tsx`);
  
  log.success(`\nüéâ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô! ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:`);
  console.log(`  üì± npm run dev      - ‡πÄ‡∏£‡∏¥‡πà‡∏° development server`);
  console.log(`  üóÉÔ∏è npm run setup-db - ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`);
  console.log(`  üå± npm run seed     - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á`);
  
  console.log(`\nüìö ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô README.md`);
  console.log(`${'='.repeat(50)}`);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
async function main() {
  try {
    log.title(`üéØ IoT Electric Energy Management System - Dependency Installation`);
    console.log(`${'='.repeat(70)}`);
    
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Node.js ‡πÅ‡∏•‡∏∞ npm
    checkNodeVersion();
    checkNpm();
    
    console.log('');
    log.info(`üì¶ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies...`);
    console.log(`${'='.repeat(70)}`);
    
    // 2. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Production Dependencies
    installDependencies(dependencies.production, 'production');
    
    console.log('');
    
    // 3. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Development Dependencies
    installDependencies(dependencies.development, 'development');
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
    const installationOk = verifyInstallation();
    
    if (installationOk) {
      log.success(`\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Dependencies ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!`);
      console.log(`${'='.repeat(70)}`);
      
      // 5. ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ
      showSummary();
    } else {
      log.error(`‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà`);
      log.info(`üí° ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: npm install`);
      process.exit(1);
    }
    
  } catch (error) {
    log.error(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
    log.info(`üí° ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: npm install`);
    process.exit(1);
  }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ
if (require.main === module) {
  main();
}

module.exports = {
  checkNodeVersion,
  checkNpm,
  installDependencies,
  verifyInstallation,
  dependencies
};
