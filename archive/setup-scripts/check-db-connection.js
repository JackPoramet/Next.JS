// Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database
const { Pool } = require('pg');

// Load environment variables
require('dotenv').config({ path: '.env' });

async function checkDatabaseConnection() {
  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database...');
  console.log('üìç Database URL:', process.env.DATABASE_URL?.replace(/:[^:]*@/, ':****@') || '‡πÑ‡∏°‡πà‡∏û‡∏ö DATABASE_URL');

  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  });

  try {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    const result = await pool.query('SELECT NOW() as current_time, version() as pg_version');
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    console.log('‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô database:', result.rows[0].current_time);
    console.log('üóÑÔ∏è PostgreSQL Version:', result.rows[0].pg_version.split(' ')[0] + ' ' + result.rows[0].pg_version.split(' ')[1]);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö database name
    const dbResult = await pool.query('SELECT current_database() as db_name');
    console.log('üìä Database Name:', dbResult.rows[0].db_name);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö tables ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const tablesResult = await pool.query(`
      SELECT tablename, schemaname 
      FROM pg_tables 
      WHERE schemaname = 'public'
      ORDER BY tablename
    `);

    if (tablesResult.rows.length > 0) {
      console.log('üìã Tables ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô database:');
      tablesResult.rows.forEach((table, index) => {
        console.log(`   ${index + 1}. ${table.tablename}`);
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö table users
      const usersResult = await pool.query(`
        SELECT column_name, data_type, is_nullable
        FROM information_schema.columns 
        WHERE table_name = 'users'
        ORDER BY ordinal_position
      `);

      if (usersResult.rows.length > 0) {
        console.log('üë§ Structure ‡∏Ç‡∏≠‡∏á table users:');
        usersResult.rows.forEach((col) => {
          console.log(`   - ${col.column_name}: ${col.data_type} ${col.is_nullable === 'NO' ? '(NOT NULL)' : '(NULLABLE)'}`);
        });

        // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô users
        const countResult = await pool.query('SELECT COUNT(*) as user_count FROM users');
        console.log(`üë• ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô users ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ${countResult.rows[0].user_count} ‡∏Ñ‡∏ô`);
      }
    } else {
      console.log('üìã ‡πÑ‡∏°‡πà‡∏û‡∏ö table ‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô database');
      console.log('üí° ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô: npm run setup-db');
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ database:');
    console.error('   Message:', error.message);
    
    if (error.code) {
      console.error('   Error Code:', error.code);
    }

    // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    if (error.message.includes('ECONNREFUSED')) {
      console.error('\nüí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
      console.error('   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ PostgreSQL service ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà');
      console.error('   2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö host ‡πÅ‡∏•‡∏∞ port ‡πÉ‡∏ô DATABASE_URL');
      console.error('   3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö firewall settings');
    } else if (error.message.includes('authentication failed')) {
      console.error('\nüí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
      console.error('   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username ‡πÅ‡∏•‡∏∞ password ‡πÉ‡∏ô DATABASE_URL');
      console.error('   2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á database');
    } else if (error.message.includes('database') && error.message.includes('does not exist')) {
      console.error('\nüí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
      console.error('   1. ‡∏™‡∏£‡πâ‡∏≤‡∏á database ‡πÉ‡∏´‡∏°‡πà');
      console.error('   2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ database ‡πÉ‡∏ô DATABASE_URL');
    } else if (error.message.includes('timeout')) {
      console.error('\nüí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
      console.error('   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network connection');
      console.error('   2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ database server ‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á');
    }

    process.exit(1);
  } finally {
    await pool.end();
  }
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• environment
console.log('üåç Environment Information:');
console.log('   NODE_ENV:', process.env.NODE_ENV || 'undefined');
console.log('   Platform:', process.platform);
console.log('   Node Version:', process.version);
console.log('');

checkDatabaseConnection();
