'use client';

import React, { useState, useEffect } from 'react';
import { useSSE } from '@/hooks/useSSE';

interface NewDeviceNotification {
  type: string;
  device_id: string;
  topic: string;
  sample_data: {
    voltage?: number;
    current?: number;
    power?: number;
    frequency?: number;
    temperature?: number;
  };
  timestamp: string;
  message: string;
}

interface NewDeviceManagerProps {
  className?: string;
  onDeviceApproved?: () => void; // Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
}

export default function NewDeviceManager({ className = '', onDeviceApproved }: NewDeviceManagerProps) {
  const [notifications, setNotifications] = useState<NewDeviceNotification[]>([]);
  const [loading, setLoading] = useState(false);
  const [processingDevices, setProcessingDevices] = useState<Set<string>>(new Set()); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ã‡πâ‡∏≥
  
  // SSE connection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  const { connect, disconnect, isConnected, lastMessage } = useSSE({
    url: '/api/sse',
    onMessage: (data: any) => {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
      if (data.topic === 'admin/new-device-notification') {
        const notification = data.data as NewDeviceNotification;
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
        setNotifications(prev => {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ device_id ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô duplicate)
          const exists = prev.some(n => n.device_id === notification.device_id);
          if (!exists) {
            return [notification, ...prev].slice(0, 10); // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          } else {
            return prev;
          }
        });
        
        // ‡πÅ‡∏™‡∏î‡∏á browser notification ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
        if (Notification.permission === 'granted') {
          new Notification('‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö', {
            body: `‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà: ${notification.device_id}`,
            icon: '/favicon.ico'
          });
        }
      }
    },
    onError: (error: any) => {
      console.error('SSE Error:', error);
    }
  });
  
  useEffect(() => {
    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SSE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    connect();
    
    // ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÉ‡∏ä‡πâ notification
    if (Notification.permission === 'default') {
      Notification.requestPermission();
    }
    
    return () => {
      disconnect();
    };
  }, [connect, disconnect]);
  
  const handleQuickApprove = async (notification: NewDeviceNotification) => {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏ã‡πâ‡∏≥
    if (processingDevices.has(notification.device_id)) {
      return;
    }

    setProcessingDevices(prev => new Set(prev).add(notification.device_id));
    setLoading(true);
    
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å device_id ‡πÅ‡∏•‡∏∞ topic
      const facultyFromTopic = notification.topic ? notification.topic.split('/')[1] || 'engineering' : 'engineering';
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
      const locationMap: { [key: string]: string } = {
        'engineering': '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå',
        'architecture': '‡∏Ñ‡∏ì‡∏∞‡∏™‡∏ñ‡∏≤‡∏õ‡∏±‡∏ï‡∏¢‡∏Å‡∏£‡∏£‡∏°‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', 
        'institution': '‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô',
        'library': '‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î',
        'science': '‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå'
      };
      
      const roomTypeMap: { [key: string]: string } = {
        'LAB': '‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£',
        'MAIN': '‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å',
        'STUDIO': '‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏ï‡∏π‡∏î‡∏¥‡πÇ‡∏≠',
        'OFFICE': '‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
        'CLASSROOM': '‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
      };
      
      // ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å device_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢
      const deviceParts = notification.device_id.split('_');
      const faculty = deviceParts[0] || 'UNK';
      const roomType = deviceParts[1] || 'DEVICE';
      const location = deviceParts[2] || 'ROOM';
      const number = deviceParts[3] || '01';
      
      const facultyName = locationMap[facultyFromTopic] || facultyFromTopic;
      const roomTypeName = roomTypeMap[roomType] || roomType;
      
      const deviceName = `${facultyName} - ${roomTypeName} ${location} (${number})`;
      
      // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      const response = await fetch('/api/admin/approve-new-device', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          device_id: notification.device_id,
          device_name: deviceName,
          faculty: facultyFromTopic,
          meter_model_id: 'SM-300-3P', // ‡πÉ‡∏ä‡πâ 3-Phase meter model ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
          building: 'Auto-detected Building',
          floor: '1',
          room: 'Auto-detected Room',
          position: 'Auto-assigned Position',
          admin_notes: `Auto-approved device from MQTT topic: ${notification.topic}`
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        alert('‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ IoT Devices Management');
        
        // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß
        setNotifications(prev => 
          prev.filter(n => n.device_id !== notification.device_id)
        );
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callback ‡πÄ‡∏û‡∏∑‡πà‡∏≠ refresh devices list
        if (onDeviceApproved) {
          onDeviceApproved();
        }
      } else {
        // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å
        if (result.message.includes('‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß')) {
          setNotifications(prev => 
            prev.filter(n => n.device_id !== notification.device_id)
          );
          alert('‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß - ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß');
        } else {
          alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.message}`);
        }
      }
    } catch (error) {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå');
    } finally {
      setProcessingDevices(prev => {
        const newSet = new Set(prev);
        newSet.delete(notification.device_id);
        return newSet;
      });
      setLoading(false);
    }
  };
  
  const dismissNotification = (device_id: string) => {
    setNotifications(prev => prev.filter(n => n.device_id !== device_id));
  };

  if (notifications.length === 0) {
    return null; // ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∞‡πÑ‡∏£‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  }

  return (
    <div className={`p-4 ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-xl font-bold text-gray-900">
          üîî ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ({notifications.length})
        </h2>
        <div className="flex items-center space-x-2">
          <div className={`h-3 w-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
          <span className="text-sm text-gray-600">
            {isConnected ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}
          </span>
        </div>
      </div>

      {/* Notifications List */}
      <div className="space-y-3">
        {notifications.map((notification, index) => (
          <div key={`${notification.device_id}-${index}`} className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <div className="flex items-center space-x-2 mb-2">
                  <span className="text-lg">‚ö°</span>
                  <h3 className="font-semibold text-gray-900">
                    ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà: {notification.device_id}
                  </h3>
                  <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">
                    ‡πÉ‡∏´‡∏°‡πà
                  </span>
                </div>
                
                <div className="text-sm text-gray-600 space-y-1">
                  <p><strong>Topic:</strong> {notification.topic}</p>
                  <p><strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö:</strong> {new Date(notification.timestamp).toLocaleString('th-TH')}</p>
                  
                  {notification.sample_data && (
                    <div className="mt-2">
                      <p><strong>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:</strong></p>
                      <div className="grid grid-cols-2 gap-2 mt-1 text-xs bg-gray-50 p-2 rounded">
                        {notification.sample_data.voltage && (
                          <span>‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô: {notification.sample_data.voltage} V</span>
                        )}
                        {notification.sample_data.current && (
                          <span>‡∏Å‡∏£‡∏∞‡πÅ‡∏™: {notification.sample_data.current} A</span>
                        )}
                        {notification.sample_data.power && (
                          <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á: {notification.sample_data.power} W</span>
                        )}
                        {notification.sample_data.frequency && (
                          <span>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà: {notification.sample_data.frequency} Hz</span>
                        )}
                        {notification.sample_data.temperature && (
                          <span>‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {notification.sample_data.temperature} ¬∞C</span>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              </div>
              
              <div className="flex flex-col space-y-2 ml-4">
                <button
                  onClick={() => handleQuickApprove(notification)}
                  disabled={loading || processingDevices.has(notification.device_id)}
                  className="bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 disabled:opacity-50 text-sm font-medium flex items-center space-x-1"
                >
                  <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                  </svg>
                  <span>
                    {processingDevices.has(notification.device_id) ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥...' : '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'}
                  </span>
                </button>
                
                <button
                  onClick={() => dismissNotification(notification.device_id)}
                  className="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 text-sm flex items-center space-x-1"
                >
                  <svg className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                  <span>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</span>
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      {loading && (
        <div className="mt-4 text-center">
          <div className="inline-flex items-center space-x-2">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
            <span className="text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...</span>
          </div>
        </div>
      )}
    </div>
  );
}
