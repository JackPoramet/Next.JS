import { Pool } from 'pg';
import { dbConfig } from '../src/config/database';
import { formatDateTime, formatTimeAgo } from '../src/utils/date';

/**
 * TypeScript Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Users ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * ‡πÉ‡∏ä‡πâ config ‡πÅ‡∏•‡∏∞ utils ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÅ‡∏•‡πâ‡∏ß
 */

interface User {
  id: number;
  email: string;
  first_name: string | null;
  last_name: string | null;
  role: string;
  is_active: boolean;
  last_login: Date | null;
  created_at: Date;
  updated_at: Date;
}

interface UserStats {
  total: number;
  active: number;
  admin: number;
  managers: number;
  users: number;
  withLogin: number;
}

async function listUsersDetailed(): Promise<void> {
  const pool = new Pool(dbConfig);

  try {
    console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...\n');

    // Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const result = await pool.query<User>(`
      SELECT 
        id,
        email,
        first_name,
        last_name,
        role,
        is_active,
        last_login,
        created_at,
        updated_at
      FROM users 
      ORDER BY 
        CASE role 
          WHEN 'admin' THEN 1 
          WHEN 'manager' THEN 2 
          WHEN 'user' THEN 3 
          ELSE 4 
        END,
        created_at ASC
    `);

    if (result.rows.length === 0) {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
      return;
    }

    const users = result.rows;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const stats: UserStats = {
      total: users.length,
      active: users.filter(user => user.is_active).length,
      admin: users.filter(user => user.role === 'admin').length,
      managers: users.filter(user => user.role === 'manager').length,
      users: users.filter(user => user.role === 'user').length,
      withLogin: users.filter(user => user.last_login).length,
    };

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
    displayStats(stats);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    displayUsersTable(users);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° Role
    displayUsersByRole(users);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    displayAnalytics(users);

    console.log('\n‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');

  } catch (error: any) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.error('üí° ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PostgreSQL server');
      console.error('üí° ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö DATABASE_URL ‡πÉ‡∏ô .env');
    } else if (error.code === '42P01') {
      console.error('üí° ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô: npm run setup-db');
    } else if (error.code === '28P01') {
      console.error('üí° ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
  } finally {
    await pool.end();
  }
}

function displayStats(stats: UserStats): void {
  console.log('üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log(`‚îÇ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${stats.total.toString().padStart(13)} ‡∏Ñ‡∏ô ‚îÇ`);
  console.log(`‚îÇ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà Active:    ${stats.active.toString().padStart(13)} ‡∏Ñ‡∏ô ‚îÇ`);
  console.log(`‚îÇ Admin:             ${stats.admin.toString().padStart(13)} ‡∏Ñ‡∏ô ‚îÇ`);
  console.log(`‚îÇ Manager:           ${stats.managers.toString().padStart(13)} ‡∏Ñ‡∏ô ‚îÇ`);
  console.log(`‚îÇ User:              ${stats.users.toString().padStart(13)} ‡∏Ñ‡∏ô ‚îÇ`);
  console.log(`‚îÇ ‡πÄ‡∏Ñ‡∏¢ Login ‡πÅ‡∏•‡πâ‡∏ß:     ${stats.withLogin.toString().padStart(13)} ‡∏Ñ‡∏ô ‚îÇ`);
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n');
}

function displayUsersTable(users: User[]): void {
  console.log('üë• ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:');
  console.log('‚îÅ'.repeat(120));
  console.log('ID ‚îÇ Email                      ‚îÇ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•              ‚îÇ Role    ‚îÇ Status ‚îÇ Last Login');
  console.log('‚îÅ'.repeat(120));

  users.forEach(user => {
    const fullName = getFullName(user);
    const lastLogin = user.last_login 
      ? formatTimeAgo(user.last_login)
      : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢';
    
    const status = user.is_active ? 'üü¢ Active' : 'üî¥ Inactive';
    const roleIcon = getRoleIcon(user.role);
    
    console.log(
      `${user.id.toString().padEnd(2)} ‚îÇ ${user.email.padEnd(26)} ‚îÇ ${fullName.padEnd(24)} ‚îÇ ${(roleIcon + user.role).padEnd(7)} ‚îÇ ${status.padEnd(10)} ‚îÇ ${lastLogin}`
    );
  });

  console.log('‚îÅ'.repeat(120));
}

function displayUsersByRole(users: User[]): void {
  const roles = [...new Set(users.map(user => user.role))];
  
  console.log('\nüìã ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° Role:');
  
  roles.forEach(role => {
    const usersInRole = users.filter(user => user.role === role);
    const activeCount = usersInRole.filter(user => user.is_active).length;
    const roleIcon = getRoleIcon(role);
    
    console.log(`\n${roleIcon} ${role.toUpperCase()} (${usersInRole.length} ‡∏Ñ‡∏ô, Active: ${activeCount} ‡∏Ñ‡∏ô):`);
    
    usersInRole.forEach(user => {
      const fullName = getFullName(user);
      const status = user.is_active ? 'üü¢' : 'üî¥';
      const lastLogin = user.last_login 
        ? `(Login: ${formatTimeAgo(user.last_login)})`
        : '(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ login)';
      
      console.log(`   ${status} ${user.email} ${fullName ? `- ${fullName}` : ''} ${lastLogin}`);
    });
  });
}

function displayAnalytics(users: User[]): void {
  console.log('\nüìà ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:');
  
  // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà active
  const inactiveUsers = users.filter(user => !user.is_active);
  if (inactiveUsers.length > 0) {
    console.log(`\n‚ö†Ô∏è  ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà active (${inactiveUsers.length} ‡∏Ñ‡∏ô):`);
    inactiveUsers.forEach(user => {
      const createdDate = formatDateTime(user.created_at);
      console.log(`   üî¥ ${user.email} (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${createdDate})`);
    });
  }

  // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ login
  const neverLoggedIn = users.filter(user => !user.last_login);
  if (neverLoggedIn.length > 0) {
    console.log(`\nüö´ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ login (${neverLoggedIn.length} ‡∏Ñ‡∏ô):`);
    neverLoggedIn.forEach(user => {
      const createdDate = formatDateTime(user.created_at);
      console.log(`   ‚≠ï ${user.email} (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${createdDate})`);
    });
  }

  // ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà login ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const recentUsers = users
    .filter(user => user.last_login)
    .sort((a, b) => new Date(b.last_login!).getTime() - new Date(a.last_login!).getTime())
    .slice(0, 5);

  if (recentUsers.length > 0) {
    console.log(`\nüïí ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà login ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (5 ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å):`);
    recentUsers.forEach((user, index) => {
      const lastLogin = formatDateTime(user.last_login!);
      const timeAgo = formatTimeAgo(user.last_login!);
      console.log(`   ${index + 1}. ${user.email} - ${lastLogin} (${timeAgo})`);
    });
  }
}

function getFullName(user: User): string {
  const fullName = `${user.first_name || ''} ${user.last_name || ''}`.trim();
  return fullName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠';
}

function getRoleIcon(role: string): string {
  switch (role) {
    case 'admin': return 'üëë ';
    case 'manager': return 'üë®‚Äçüíº ';
    case 'user': return 'üë§ ';
    default: return '‚ùì ';
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
if (require.main === module) {
  listUsersDetailed().catch(console.error);
}

export { listUsersDetailed };
