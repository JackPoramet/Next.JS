// Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏ó‡∏∏‡∏Å table ‡πÉ‡∏ô PostgreSQL
const { Pool } = require('pg');

// Load environment variables
require('dotenv').config({ path: '.env.local' });

async function dropAllTables() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  });

  try {
    console.log('üóëÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏•‡∏ö‡∏ó‡∏∏‡∏Å table...');

    // ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ table ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
    console.log('üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö table ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà...');
    const tablesResult = await pool.query(`
      SELECT tablename 
      FROM pg_tables 
      WHERE schemaname = 'public'
    `);

    const tables = tablesResult.rows;
    
    if (tables.length === 0) {
      console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö table ‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô database');
      return;
    }

    console.log('üì¶ ‡∏û‡∏ö table ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:');
    tables.forEach((table, index) => {
      console.log(`   ${index + 1}. ${table.tablename}`);
    });

    // ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å table
    console.log('\nüóëÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö table ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');
    
    for (const table of tables) {
      try {
        await pool.query(`DROP TABLE IF EXISTS ${table.tablename} CASCADE`);
        console.log(`‚úÖ ‡∏•‡∏ö table "${table.tablename}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
      } catch (error) {
        console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö table "${table.tablename}":`, error.message);
      }
    }

    // ‡∏•‡∏ö functions ‡πÅ‡∏•‡∏∞ triggers ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
    console.log('\nüßπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏ö functions ‡πÅ‡∏•‡∏∞ triggers...');
    try {
      await pool.query(`DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE`);
      console.log('‚úÖ ‡∏•‡∏ö functions ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      console.log('‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ functions ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏•‡∏ö‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const remainingTablesResult = await pool.query(`
      SELECT tablename 
      FROM pg_tables 
      WHERE schemaname = 'public'
    `);

    if (remainingTablesResult.rows.length === 0) {
      console.log('\nüéâ ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å table ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! Database ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
    } else {
      console.log('\n‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡∏°‡∏µ table ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà:');
      remainingTablesResult.rows.forEach((table) => {
        console.log(`   - ${table.tablename}`);
      });
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö table:', error);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.error('üí° ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ PostgreSQL ‡πÑ‡∏î‡πâ');
    } else if (error.message.includes('authentication failed')) {
      console.error('üí° ‡∏Å‡∏≤‡∏£ authentication ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    }
    
    process.exit(1);
  } finally {
    await pool.end();
  }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö
function askForConfirmation() {
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    rl.question('‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏ó‡∏∏‡∏Å table? ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ! (‡∏û‡∏¥‡∏°‡∏û‡πå "YES" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô): ', (answer) => {
      rl.close();
      resolve(answer === 'YES');
    });
  });
}

async function main() {
  console.log('üö® DANGER ZONE: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏•‡∏ö‡∏ó‡∏∏‡∏Å table ‡πÉ‡∏ô database!');
  console.log('üìç Database:', process.env.DATABASE_URL?.split('@')[1] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏');
  
  const confirmed = await askForConfirmation();
  
  if (confirmed) {
    await dropAllTables();
  } else {
    console.log('‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö table');
  }
}

// ‡∏£‡∏±‡∏ô script ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { dropAllTables };
