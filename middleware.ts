import { NextRequest, NextResponse } from 'next/server';

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î protected ‡πÅ‡∏•‡∏∞ public routes
const protectedRoutes = ['/dashboard'];
const publicRoutes = ['/login', '/register', '/', '/debug-auth', '/test-auth', '/cookie-test'];

export default async function middleware(req: NextRequest) {
  // ‡∏î‡∏∂‡∏á path ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  const path = req.nextUrl.pathname;
  const isProtectedRoute = protectedRoutes.includes(path);
  const isPublicRoute = publicRoutes.includes(path);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö auth token ‡∏à‡∏≤‡∏Å cookie
  const token = req.cookies.get('auth-token')?.value;
  
  console.log('üîí Middleware:', path, token ? '‚úÖ Has token' : '‚ùå No token');
  
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô protected route ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ login
  if (isProtectedRoute && !token) {
    console.log('üö´ Redirecting to login');
    return NextResponse.redirect(new URL(`/login?from=${path}`, req.nextUrl));
  }

  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô login page ‡πÅ‡∏•‡∏∞‡∏°‡∏µ token ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ dashboard
  if (path === '/login' && token) {
    console.log('‚úÖ Redirecting to dashboard');
    return NextResponse.redirect(new URL('/dashboard', req.nextUrl));
  }

  return NextResponse.next();
}

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤ middleware ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö routes ‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á
export const config = {
  matcher: ['/((?!api|_next/static|_next/image|.*\\.png$).*)'],
};
