/**
 * Cleanup Service
 * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà active ‡πÉ‡∏ô devices_pending table
 */

import pool from './database';

class CleanupService {
  private intervalId: NodeJS.Timeout | null = null;
  private isRunning = false;
  private cleanupInterval = 30 * 1000; // ‡∏£‡∏±‡∏ô‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  private deviceTimeout = 60 * 1000; // ‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ

  constructor() {
    this.start();
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô cleanup service
   */
  public start() {
    if (this.isRunning) {
      console.log('üßπ Cleanup service is already running');
      return;
    }

    this.isRunning = true;
    console.log('üßπ Starting cleanup service...');
    console.log(`‚è∞ Cleanup interval: ${this.cleanupInterval/1000}s`);
    console.log(`‚è≥ Device timeout: ${this.deviceTimeout/1000}s`);

    this.intervalId = setInterval(async () => {
      await this.cleanupInactiveDevices();
    }, this.cleanupInterval);
  }

  /**
   * ‡∏´‡∏¢‡∏∏‡∏î cleanup service
   */
  public stop() {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    this.isRunning = false;
    console.log('üßπ Cleanup service stopped');
  }

  /**
   * ‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà active ‡∏à‡∏≤‡∏Å devices_pending
   */
  private async cleanupInactiveDevices() {
    try {
      // ‡∏•‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà last_seen_at ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ
      const result = await pool.query(`
        DELETE FROM devices_pending 
        WHERE last_seen_at < NOW() - INTERVAL '${this.deviceTimeout/1000} seconds'
        RETURNING device_id, device_name, last_seen_at
      `);

      if (result.rows.length > 0) {
        console.log('üßπ Cleaned up inactive devices:', result.rows.length);
        result.rows.forEach(device => {
          console.log(`   - ${device.device_id} (${device.device_name}) - last seen: ${device.last_seen_at}`);
        });
      } else {
        console.log('üßπ No inactive devices to clean up');
      }

    } catch (error) {
      console.error('‚ùå Error during cleanup:', error);
    }
  }

  /**
   * ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á cleanup service
   */
  public getStatus() {
    return {
      isRunning: this.isRunning,
      cleanupInterval: this.cleanupInterval,
      deviceTimeout: this.deviceTimeout,
      nextCleanup: this.intervalId ? new Date(Date.now() + this.cleanupInterval) : null
    };
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ timeout ‡πÉ‡∏´‡∏°‡πà (milliseconds)
   */
  public setDeviceTimeout(timeoutMs: number) {
    this.deviceTimeout = timeoutMs;
    console.log(`üßπ Updated device timeout to: ${timeoutMs/1000}s`);
  }

  /**
   * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cleanup interval ‡πÉ‡∏´‡∏°‡πà (milliseconds)
   */
  public setCleanupInterval(intervalMs: number) {
    this.cleanupInterval = intervalMs;
    
    // Restart service with new interval
    this.stop();
    setTimeout(() => this.start(), 100);
    
    console.log(`üßπ Updated cleanup interval to: ${intervalMs/1000}s`);
  }

  /**
   * ‡∏£‡∏±‡∏ô cleanup ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏≠ interval
   */
  public async forceCleanup() {
    console.log('üßπ Running forced cleanup...');
    await this.cleanupInactiveDevices();
  }

  /**
   * ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
   */
  public async getInactiveDevices() {
    try {
      const result = await pool.query(`
        SELECT 
          device_id, 
          device_name, 
          last_seen_at,
          EXTRACT(EPOCH FROM (NOW() - last_seen_at)) as seconds_inactive
        FROM devices_pending 
        WHERE last_seen_at < NOW() - INTERVAL '${this.deviceTimeout/1000} seconds'
        ORDER BY last_seen_at ASC
      `);

      return result.rows;
    } catch (error) {
      console.error('‚ùå Error getting inactive devices:', error);
      return [];
    }
  }

  /**
   * ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
   */
  public async getAllDevicesStatus() {
    try {
      const result = await pool.query(`
        SELECT 
          device_id, 
          device_name, 
          last_seen_at,
          EXTRACT(EPOCH FROM (NOW() - last_seen_at)) as seconds_inactive,
          CASE 
            WHEN last_seen_at > NOW() - INTERVAL '${this.deviceTimeout/1000} seconds' THEN 'active'
            ELSE 'will_be_deleted'
          END as status
        FROM devices_pending 
        ORDER BY last_seen_at DESC
      `);

      return result.rows;
    } catch (error) {
      console.error('‚ùå Error getting all devices status:', error);
      return [];
    }
  }
}

// Singleton instance
let cleanupService: CleanupService | null = null;

export function getCleanupService(): CleanupService {
  if (!cleanupService) {
    cleanupService = new CleanupService();
  }
  return cleanupService;
}

export default CleanupService;
